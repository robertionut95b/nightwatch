// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../generated/type-graphql"
  emitTranspiledCode = true
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  lastName      String?
  firstName     String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  settings      AppSettings[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model AppSettings {
  id        String    @id @default(cuid())
  name      String    @unique
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationRequest {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Genre {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  movies    Movie[]
  series    Serie[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Director {
  id        Int      @id @default(autoincrement())
  name      String
  movies    Movie[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  series    Serie?   @relation(fields: [seriesId], references: [id])
  seriesId  Int?
}

model Actor {
  id        Int      @id @default(autoincrement())
  name      String
  movies    Movie[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  series    Serie?   @relation(fields: [seriesId], references: [id])
  seriesId  Int?
}

model Language {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  movies    Movie[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  series    Serie[]
  seriesId  Int?
}

model Movie {
  id         Int        @id @default(autoincrement())
  title      String
  year       Int
  rating     String
  release    DateTime
  runtime    Int
  genres     Genre[]
  directors  Director[]
  actors     Actor[]
  plot       String
  languages  Language[]
  poster     String
  imdbRating Float
  imdbID     String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Serie {
  id           Int        @id @default(autoincrement())
  title        String
  year         Int
  rating       String
  release      DateTime
  runtime      Int
  genres       Genre[]
  directors    Director[]
  actors       Actor[]
  plot         String
  languages    Language[]
  poster       String
  imdbRating   Float
  imdbID       String     @unique
  totalSeasons Int
  seasons      Season[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Season {
  id         Int       @id @default(autoincrement())
  title      String
  index      Int
  episodes   Int
  episodeIds Episode[]
  series     Serie     @relation(fields: [seriesId], references: [id])
  seriesId   Int
  launchDate DateTime  @default(now())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Episode {
  id         Int    @id @default(autoincrement())
  title      String
  runtime    Int
  plot       String
  poster     String
  imdbRating Float
  imdbID     String @unique
  season     Season @relation(fields: [seasonId], references: [id])
  seasonId   Int
}
