import { GraphQLResolveInfo } from "graphql";
import { AggregateActorArgs } from "./args/AggregateActorArgs";
import { CreateActorArgs } from "./args/CreateActorArgs";
import { CreateManyActorArgs } from "./args/CreateManyActorArgs";
import { DeleteActorArgs } from "./args/DeleteActorArgs";
import { DeleteManyActorArgs } from "./args/DeleteManyActorArgs";
import { FindFirstActorArgs } from "./args/FindFirstActorArgs";
import { FindManyActorArgs } from "./args/FindManyActorArgs";
import { FindUniqueActorArgs } from "./args/FindUniqueActorArgs";
import { GroupByActorArgs } from "./args/GroupByActorArgs";
import { UpdateActorArgs } from "./args/UpdateActorArgs";
import { UpdateManyActorArgs } from "./args/UpdateManyActorArgs";
import { UpsertActorArgs } from "./args/UpsertActorArgs";
import { Actor } from "../../../models/Actor";
import { ActorGroupBy } from "../../outputs/ActorGroupBy";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateActor } from "../../outputs/AggregateActor";
export declare class ActorCrudResolver {
    actor(ctx: any, info: GraphQLResolveInfo, args: FindUniqueActorArgs): Promise<Actor | null>;
    findFirstActor(ctx: any, info: GraphQLResolveInfo, args: FindFirstActorArgs): Promise<Actor | null>;
    actors(ctx: any, info: GraphQLResolveInfo, args: FindManyActorArgs): Promise<Actor[]>;
    createActor(ctx: any, info: GraphQLResolveInfo, args: CreateActorArgs): Promise<Actor>;
    createManyActor(ctx: any, info: GraphQLResolveInfo, args: CreateManyActorArgs): Promise<AffectedRowsOutput>;
    deleteActor(ctx: any, info: GraphQLResolveInfo, args: DeleteActorArgs): Promise<Actor | null>;
    updateActor(ctx: any, info: GraphQLResolveInfo, args: UpdateActorArgs): Promise<Actor | null>;
    deleteManyActor(ctx: any, info: GraphQLResolveInfo, args: DeleteManyActorArgs): Promise<AffectedRowsOutput>;
    updateManyActor(ctx: any, info: GraphQLResolveInfo, args: UpdateManyActorArgs): Promise<AffectedRowsOutput>;
    upsertActor(ctx: any, info: GraphQLResolveInfo, args: UpsertActorArgs): Promise<Actor>;
    aggregateActor(ctx: any, info: GraphQLResolveInfo, args: AggregateActorArgs): Promise<AggregateActor>;
    groupByActor(ctx: any, info: GraphQLResolveInfo, args: GroupByActorArgs): Promise<ActorGroupBy[]>;
}
