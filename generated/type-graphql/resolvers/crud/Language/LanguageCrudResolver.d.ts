import { GraphQLResolveInfo } from "graphql";
import { AggregateLanguageArgs } from "./args/AggregateLanguageArgs";
import { CreateLanguageArgs } from "./args/CreateLanguageArgs";
import { CreateManyLanguageArgs } from "./args/CreateManyLanguageArgs";
import { DeleteLanguageArgs } from "./args/DeleteLanguageArgs";
import { DeleteManyLanguageArgs } from "./args/DeleteManyLanguageArgs";
import { FindFirstLanguageArgs } from "./args/FindFirstLanguageArgs";
import { FindManyLanguageArgs } from "./args/FindManyLanguageArgs";
import { FindUniqueLanguageArgs } from "./args/FindUniqueLanguageArgs";
import { GroupByLanguageArgs } from "./args/GroupByLanguageArgs";
import { UpdateLanguageArgs } from "./args/UpdateLanguageArgs";
import { UpdateManyLanguageArgs } from "./args/UpdateManyLanguageArgs";
import { UpsertLanguageArgs } from "./args/UpsertLanguageArgs";
import { Language } from "../../../models/Language";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateLanguage } from "../../outputs/AggregateLanguage";
import { LanguageGroupBy } from "../../outputs/LanguageGroupBy";
export declare class LanguageCrudResolver {
    language(ctx: any, info: GraphQLResolveInfo, args: FindUniqueLanguageArgs): Promise<Language | null>;
    findFirstLanguage(ctx: any, info: GraphQLResolveInfo, args: FindFirstLanguageArgs): Promise<Language | null>;
    languages(ctx: any, info: GraphQLResolveInfo, args: FindManyLanguageArgs): Promise<Language[]>;
    createLanguage(ctx: any, info: GraphQLResolveInfo, args: CreateLanguageArgs): Promise<Language>;
    createManyLanguage(ctx: any, info: GraphQLResolveInfo, args: CreateManyLanguageArgs): Promise<AffectedRowsOutput>;
    deleteLanguage(ctx: any, info: GraphQLResolveInfo, args: DeleteLanguageArgs): Promise<Language | null>;
    updateLanguage(ctx: any, info: GraphQLResolveInfo, args: UpdateLanguageArgs): Promise<Language | null>;
    deleteManyLanguage(ctx: any, info: GraphQLResolveInfo, args: DeleteManyLanguageArgs): Promise<AffectedRowsOutput>;
    updateManyLanguage(ctx: any, info: GraphQLResolveInfo, args: UpdateManyLanguageArgs): Promise<AffectedRowsOutput>;
    upsertLanguage(ctx: any, info: GraphQLResolveInfo, args: UpsertLanguageArgs): Promise<Language>;
    aggregateLanguage(ctx: any, info: GraphQLResolveInfo, args: AggregateLanguageArgs): Promise<AggregateLanguage>;
    groupByLanguage(ctx: any, info: GraphQLResolveInfo, args: GroupByLanguageArgs): Promise<LanguageGroupBy[]>;
}
