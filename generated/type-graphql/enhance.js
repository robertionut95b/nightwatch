"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const crudResolvers = __importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = __importStar(require("./resolvers/crud/args.index"));
const actionResolvers = __importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = __importStar(require("./resolvers/relations/resolvers.index"));
const models = __importStar(require("./models"));
const outputTypes = __importStar(require("./resolvers/outputs"));
const inputTypes = __importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    User: crudResolvers.UserCrudResolver,
    Account: crudResolvers.AccountCrudResolver,
    Session: crudResolvers.SessionCrudResolver,
    VerificationRequest: crudResolvers.VerificationRequestCrudResolver,
    Genre: crudResolvers.GenreCrudResolver,
    Director: crudResolvers.DirectorCrudResolver,
    Actor: crudResolvers.ActorCrudResolver,
    Language: crudResolvers.LanguageCrudResolver,
    Movie: crudResolvers.MovieCrudResolver,
    Serie: crudResolvers.SerieCrudResolver,
    Season: crudResolvers.SeasonCrudResolver,
    Episode: crudResolvers.EpisodeCrudResolver
};
const actionResolversMap = {
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    Account: {
        account: actionResolvers.FindUniqueAccountResolver,
        findFirstAccount: actionResolvers.FindFirstAccountResolver,
        accounts: actionResolvers.FindManyAccountResolver,
        createAccount: actionResolvers.CreateAccountResolver,
        createManyAccount: actionResolvers.CreateManyAccountResolver,
        deleteAccount: actionResolvers.DeleteAccountResolver,
        updateAccount: actionResolvers.UpdateAccountResolver,
        deleteManyAccount: actionResolvers.DeleteManyAccountResolver,
        updateManyAccount: actionResolvers.UpdateManyAccountResolver,
        upsertAccount: actionResolvers.UpsertAccountResolver,
        aggregateAccount: actionResolvers.AggregateAccountResolver,
        groupByAccount: actionResolvers.GroupByAccountResolver
    },
    Session: {
        session: actionResolvers.FindUniqueSessionResolver,
        findFirstSession: actionResolvers.FindFirstSessionResolver,
        sessions: actionResolvers.FindManySessionResolver,
        createSession: actionResolvers.CreateSessionResolver,
        createManySession: actionResolvers.CreateManySessionResolver,
        deleteSession: actionResolvers.DeleteSessionResolver,
        updateSession: actionResolvers.UpdateSessionResolver,
        deleteManySession: actionResolvers.DeleteManySessionResolver,
        updateManySession: actionResolvers.UpdateManySessionResolver,
        upsertSession: actionResolvers.UpsertSessionResolver,
        aggregateSession: actionResolvers.AggregateSessionResolver,
        groupBySession: actionResolvers.GroupBySessionResolver
    },
    VerificationRequest: {
        verificationRequest: actionResolvers.FindUniqueVerificationRequestResolver,
        findFirstVerificationRequest: actionResolvers.FindFirstVerificationRequestResolver,
        verificationRequests: actionResolvers.FindManyVerificationRequestResolver,
        createVerificationRequest: actionResolvers.CreateVerificationRequestResolver,
        createManyVerificationRequest: actionResolvers.CreateManyVerificationRequestResolver,
        deleteVerificationRequest: actionResolvers.DeleteVerificationRequestResolver,
        updateVerificationRequest: actionResolvers.UpdateVerificationRequestResolver,
        deleteManyVerificationRequest: actionResolvers.DeleteManyVerificationRequestResolver,
        updateManyVerificationRequest: actionResolvers.UpdateManyVerificationRequestResolver,
        upsertVerificationRequest: actionResolvers.UpsertVerificationRequestResolver,
        aggregateVerificationRequest: actionResolvers.AggregateVerificationRequestResolver,
        groupByVerificationRequest: actionResolvers.GroupByVerificationRequestResolver
    },
    Genre: {
        genre: actionResolvers.FindUniqueGenreResolver,
        findFirstGenre: actionResolvers.FindFirstGenreResolver,
        genres: actionResolvers.FindManyGenreResolver,
        createGenre: actionResolvers.CreateGenreResolver,
        createManyGenre: actionResolvers.CreateManyGenreResolver,
        deleteGenre: actionResolvers.DeleteGenreResolver,
        updateGenre: actionResolvers.UpdateGenreResolver,
        deleteManyGenre: actionResolvers.DeleteManyGenreResolver,
        updateManyGenre: actionResolvers.UpdateManyGenreResolver,
        upsertGenre: actionResolvers.UpsertGenreResolver,
        aggregateGenre: actionResolvers.AggregateGenreResolver,
        groupByGenre: actionResolvers.GroupByGenreResolver
    },
    Director: {
        director: actionResolvers.FindUniqueDirectorResolver,
        findFirstDirector: actionResolvers.FindFirstDirectorResolver,
        directors: actionResolvers.FindManyDirectorResolver,
        createDirector: actionResolvers.CreateDirectorResolver,
        createManyDirector: actionResolvers.CreateManyDirectorResolver,
        deleteDirector: actionResolvers.DeleteDirectorResolver,
        updateDirector: actionResolvers.UpdateDirectorResolver,
        deleteManyDirector: actionResolvers.DeleteManyDirectorResolver,
        updateManyDirector: actionResolvers.UpdateManyDirectorResolver,
        upsertDirector: actionResolvers.UpsertDirectorResolver,
        aggregateDirector: actionResolvers.AggregateDirectorResolver,
        groupByDirector: actionResolvers.GroupByDirectorResolver
    },
    Actor: {
        actor: actionResolvers.FindUniqueActorResolver,
        findFirstActor: actionResolvers.FindFirstActorResolver,
        actors: actionResolvers.FindManyActorResolver,
        createActor: actionResolvers.CreateActorResolver,
        createManyActor: actionResolvers.CreateManyActorResolver,
        deleteActor: actionResolvers.DeleteActorResolver,
        updateActor: actionResolvers.UpdateActorResolver,
        deleteManyActor: actionResolvers.DeleteManyActorResolver,
        updateManyActor: actionResolvers.UpdateManyActorResolver,
        upsertActor: actionResolvers.UpsertActorResolver,
        aggregateActor: actionResolvers.AggregateActorResolver,
        groupByActor: actionResolvers.GroupByActorResolver
    },
    Language: {
        language: actionResolvers.FindUniqueLanguageResolver,
        findFirstLanguage: actionResolvers.FindFirstLanguageResolver,
        languages: actionResolvers.FindManyLanguageResolver,
        createLanguage: actionResolvers.CreateLanguageResolver,
        createManyLanguage: actionResolvers.CreateManyLanguageResolver,
        deleteLanguage: actionResolvers.DeleteLanguageResolver,
        updateLanguage: actionResolvers.UpdateLanguageResolver,
        deleteManyLanguage: actionResolvers.DeleteManyLanguageResolver,
        updateManyLanguage: actionResolvers.UpdateManyLanguageResolver,
        upsertLanguage: actionResolvers.UpsertLanguageResolver,
        aggregateLanguage: actionResolvers.AggregateLanguageResolver,
        groupByLanguage: actionResolvers.GroupByLanguageResolver
    },
    Movie: {
        movie: actionResolvers.FindUniqueMovieResolver,
        findFirstMovie: actionResolvers.FindFirstMovieResolver,
        movies: actionResolvers.FindManyMovieResolver,
        createMovie: actionResolvers.CreateMovieResolver,
        createManyMovie: actionResolvers.CreateManyMovieResolver,
        deleteMovie: actionResolvers.DeleteMovieResolver,
        updateMovie: actionResolvers.UpdateMovieResolver,
        deleteManyMovie: actionResolvers.DeleteManyMovieResolver,
        updateManyMovie: actionResolvers.UpdateManyMovieResolver,
        upsertMovie: actionResolvers.UpsertMovieResolver,
        aggregateMovie: actionResolvers.AggregateMovieResolver,
        groupByMovie: actionResolvers.GroupByMovieResolver
    },
    Serie: {
        serie: actionResolvers.FindUniqueSerieResolver,
        findFirstSerie: actionResolvers.FindFirstSerieResolver,
        series: actionResolvers.FindManySerieResolver,
        createSerie: actionResolvers.CreateSerieResolver,
        createManySerie: actionResolvers.CreateManySerieResolver,
        deleteSerie: actionResolvers.DeleteSerieResolver,
        updateSerie: actionResolvers.UpdateSerieResolver,
        deleteManySerie: actionResolvers.DeleteManySerieResolver,
        updateManySerie: actionResolvers.UpdateManySerieResolver,
        upsertSerie: actionResolvers.UpsertSerieResolver,
        aggregateSerie: actionResolvers.AggregateSerieResolver,
        groupBySerie: actionResolvers.GroupBySerieResolver
    },
    Season: {
        season: actionResolvers.FindUniqueSeasonResolver,
        findFirstSeason: actionResolvers.FindFirstSeasonResolver,
        seasons: actionResolvers.FindManySeasonResolver,
        createSeason: actionResolvers.CreateSeasonResolver,
        createManySeason: actionResolvers.CreateManySeasonResolver,
        deleteSeason: actionResolvers.DeleteSeasonResolver,
        updateSeason: actionResolvers.UpdateSeasonResolver,
        deleteManySeason: actionResolvers.DeleteManySeasonResolver,
        updateManySeason: actionResolvers.UpdateManySeasonResolver,
        upsertSeason: actionResolvers.UpsertSeasonResolver,
        aggregateSeason: actionResolvers.AggregateSeasonResolver,
        groupBySeason: actionResolvers.GroupBySeasonResolver
    },
    Episode: {
        episode: actionResolvers.FindUniqueEpisodeResolver,
        findFirstEpisode: actionResolvers.FindFirstEpisodeResolver,
        episodes: actionResolvers.FindManyEpisodeResolver,
        createEpisode: actionResolvers.CreateEpisodeResolver,
        createManyEpisode: actionResolvers.CreateManyEpisodeResolver,
        deleteEpisode: actionResolvers.DeleteEpisodeResolver,
        updateEpisode: actionResolvers.UpdateEpisodeResolver,
        deleteManyEpisode: actionResolvers.DeleteManyEpisodeResolver,
        updateManyEpisode: actionResolvers.UpdateManyEpisodeResolver,
        upsertEpisode: actionResolvers.UpsertEpisodeResolver,
        aggregateEpisode: actionResolvers.AggregateEpisodeResolver,
        groupByEpisode: actionResolvers.GroupByEpisodeResolver
    }
};
const crudResolversInfo = {
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    Account: ["account", "findFirstAccount", "accounts", "createAccount", "createManyAccount", "deleteAccount", "updateAccount", "deleteManyAccount", "updateManyAccount", "upsertAccount", "aggregateAccount", "groupByAccount"],
    Session: ["session", "findFirstSession", "sessions", "createSession", "createManySession", "deleteSession", "updateSession", "deleteManySession", "updateManySession", "upsertSession", "aggregateSession", "groupBySession"],
    VerificationRequest: ["verificationRequest", "findFirstVerificationRequest", "verificationRequests", "createVerificationRequest", "createManyVerificationRequest", "deleteVerificationRequest", "updateVerificationRequest", "deleteManyVerificationRequest", "updateManyVerificationRequest", "upsertVerificationRequest", "aggregateVerificationRequest", "groupByVerificationRequest"],
    Genre: ["genre", "findFirstGenre", "genres", "createGenre", "createManyGenre", "deleteGenre", "updateGenre", "deleteManyGenre", "updateManyGenre", "upsertGenre", "aggregateGenre", "groupByGenre"],
    Director: ["director", "findFirstDirector", "directors", "createDirector", "createManyDirector", "deleteDirector", "updateDirector", "deleteManyDirector", "updateManyDirector", "upsertDirector", "aggregateDirector", "groupByDirector"],
    Actor: ["actor", "findFirstActor", "actors", "createActor", "createManyActor", "deleteActor", "updateActor", "deleteManyActor", "updateManyActor", "upsertActor", "aggregateActor", "groupByActor"],
    Language: ["language", "findFirstLanguage", "languages", "createLanguage", "createManyLanguage", "deleteLanguage", "updateLanguage", "deleteManyLanguage", "updateManyLanguage", "upsertLanguage", "aggregateLanguage", "groupByLanguage"],
    Movie: ["movie", "findFirstMovie", "movies", "createMovie", "createManyMovie", "deleteMovie", "updateMovie", "deleteManyMovie", "updateManyMovie", "upsertMovie", "aggregateMovie", "groupByMovie"],
    Serie: ["serie", "findFirstSerie", "series", "createSerie", "createManySerie", "deleteSerie", "updateSerie", "deleteManySerie", "updateManySerie", "upsertSerie", "aggregateSerie", "groupBySerie"],
    Season: ["season", "findFirstSeason", "seasons", "createSeason", "createManySeason", "deleteSeason", "updateSeason", "deleteManySeason", "updateManySeason", "upsertSeason", "aggregateSeason", "groupBySeason"],
    Episode: ["episode", "findFirstEpisode", "episodes", "createEpisode", "createManyEpisode", "deleteEpisode", "updateEpisode", "deleteManyEpisode", "updateManyEpisode", "upsertEpisode", "aggregateEpisode", "groupByEpisode"]
};
const argsInfo = {
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data", "skipDuplicates"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAccountArgs: ["where"],
    FindFirstAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAccountArgs: ["data"],
    CreateManyAccountArgs: ["data", "skipDuplicates"],
    DeleteAccountArgs: ["where"],
    UpdateAccountArgs: ["data", "where"],
    DeleteManyAccountArgs: ["where"],
    UpdateManyAccountArgs: ["data", "where"],
    UpsertAccountArgs: ["where", "create", "update"],
    AggregateAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSessionArgs: ["where"],
    FindFirstSessionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySessionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSessionArgs: ["data"],
    CreateManySessionArgs: ["data", "skipDuplicates"],
    DeleteSessionArgs: ["where"],
    UpdateSessionArgs: ["data", "where"],
    DeleteManySessionArgs: ["where"],
    UpdateManySessionArgs: ["data", "where"],
    UpsertSessionArgs: ["where", "create", "update"],
    AggregateSessionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySessionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueVerificationRequestArgs: ["where"],
    FindFirstVerificationRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyVerificationRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateVerificationRequestArgs: ["data"],
    CreateManyVerificationRequestArgs: ["data", "skipDuplicates"],
    DeleteVerificationRequestArgs: ["where"],
    UpdateVerificationRequestArgs: ["data", "where"],
    DeleteManyVerificationRequestArgs: ["where"],
    UpdateManyVerificationRequestArgs: ["data", "where"],
    UpsertVerificationRequestArgs: ["where", "create", "update"],
    AggregateVerificationRequestArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByVerificationRequestArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueGenreArgs: ["where"],
    FindFirstGenreArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyGenreArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateGenreArgs: ["data"],
    CreateManyGenreArgs: ["data", "skipDuplicates"],
    DeleteGenreArgs: ["where"],
    UpdateGenreArgs: ["data", "where"],
    DeleteManyGenreArgs: ["where"],
    UpdateManyGenreArgs: ["data", "where"],
    UpsertGenreArgs: ["where", "create", "update"],
    AggregateGenreArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByGenreArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueDirectorArgs: ["where"],
    FindFirstDirectorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyDirectorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateDirectorArgs: ["data"],
    CreateManyDirectorArgs: ["data", "skipDuplicates"],
    DeleteDirectorArgs: ["where"],
    UpdateDirectorArgs: ["data", "where"],
    DeleteManyDirectorArgs: ["where"],
    UpdateManyDirectorArgs: ["data", "where"],
    UpsertDirectorArgs: ["where", "create", "update"],
    AggregateDirectorArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByDirectorArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueActorArgs: ["where"],
    FindFirstActorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyActorArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateActorArgs: ["data"],
    CreateManyActorArgs: ["data", "skipDuplicates"],
    DeleteActorArgs: ["where"],
    UpdateActorArgs: ["data", "where"],
    DeleteManyActorArgs: ["where"],
    UpdateManyActorArgs: ["data", "where"],
    UpsertActorArgs: ["where", "create", "update"],
    AggregateActorArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByActorArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLanguageArgs: ["where"],
    FindFirstLanguageArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLanguageArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLanguageArgs: ["data"],
    CreateManyLanguageArgs: ["data", "skipDuplicates"],
    DeleteLanguageArgs: ["where"],
    UpdateLanguageArgs: ["data", "where"],
    DeleteManyLanguageArgs: ["where"],
    UpdateManyLanguageArgs: ["data", "where"],
    UpsertLanguageArgs: ["where", "create", "update"],
    AggregateLanguageArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLanguageArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueMovieArgs: ["where"],
    FindFirstMovieArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyMovieArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateMovieArgs: ["data"],
    CreateManyMovieArgs: ["data", "skipDuplicates"],
    DeleteMovieArgs: ["where"],
    UpdateMovieArgs: ["data", "where"],
    DeleteManyMovieArgs: ["where"],
    UpdateManyMovieArgs: ["data", "where"],
    UpsertMovieArgs: ["where", "create", "update"],
    AggregateMovieArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByMovieArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSerieArgs: ["where"],
    FindFirstSerieArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySerieArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSerieArgs: ["data"],
    CreateManySerieArgs: ["data", "skipDuplicates"],
    DeleteSerieArgs: ["where"],
    UpdateSerieArgs: ["data", "where"],
    DeleteManySerieArgs: ["where"],
    UpdateManySerieArgs: ["data", "where"],
    UpsertSerieArgs: ["where", "create", "update"],
    AggregateSerieArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySerieArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSeasonArgs: ["where"],
    FindFirstSeasonArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySeasonArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSeasonArgs: ["data"],
    CreateManySeasonArgs: ["data", "skipDuplicates"],
    DeleteSeasonArgs: ["where"],
    UpdateSeasonArgs: ["data", "where"],
    DeleteManySeasonArgs: ["where"],
    UpdateManySeasonArgs: ["data", "where"],
    UpsertSeasonArgs: ["where", "create", "update"],
    AggregateSeasonArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySeasonArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueEpisodeArgs: ["where"],
    FindFirstEpisodeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyEpisodeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateEpisodeArgs: ["data"],
    CreateManyEpisodeArgs: ["data", "skipDuplicates"],
    DeleteEpisodeArgs: ["where"],
    UpdateEpisodeArgs: ["data", "where"],
    DeleteManyEpisodeArgs: ["where"],
    UpdateManyEpisodeArgs: ["data", "where"],
    UpsertEpisodeArgs: ["where", "create", "update"],
    AggregateEpisodeArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByEpisodeArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                for (const allActionsDecorator of allActionsDecorators) {
                    allActionsDecorator(crudTarget, resolverActionName, Object.getOwnPropertyDescriptor(crudTarget, resolverActionName));
                    allActionsDecorator(actionTarget, resolverActionName, Object.getOwnPropertyDescriptor(actionTarget, resolverActionName));
                }
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            for (const decorator of decorators) {
                decorator(crudTarget, resolverActionName, Object.getOwnPropertyDescriptor(crudTarget, resolverActionName));
                decorator(actionTarget, resolverActionName, Object.getOwnPropertyDescriptor(actionTarget, resolverActionName));
            }
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    User: relationResolvers.UserRelationsResolver,
    Account: relationResolvers.AccountRelationsResolver,
    Session: relationResolvers.SessionRelationsResolver,
    Genre: relationResolvers.GenreRelationsResolver,
    Director: relationResolvers.DirectorRelationsResolver,
    Actor: relationResolvers.ActorRelationsResolver,
    Language: relationResolvers.LanguageRelationsResolver,
    Movie: relationResolvers.MovieRelationsResolver,
    Serie: relationResolvers.SerieRelationsResolver,
    Season: relationResolvers.SeasonRelationsResolver,
    Episode: relationResolvers.EpisodeRelationsResolver
};
const relationResolversInfo = {
    User: ["accounts", "sessions"],
    Account: ["user"],
    Session: ["user"],
    Genre: ["movies", "series"],
    Director: ["movies", "series"],
    Actor: ["movies", "series"],
    Language: ["movies", "series"],
    Movie: ["genres", "directors", "actors", "languages"],
    Serie: ["genres", "directors", "actors", "languages", "seasons"],
    Season: ["episodeIds", "series"],
    Episode: ["season"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                for (const allActionsDecorator of allActionsDecorators) {
                    allActionsDecorator(relationResolverTarget, relationResolverActionName, Object.getOwnPropertyDescriptor(relationResolverTarget, relationResolverActionName));
                }
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            for (const decorator of decorators) {
                decorator(relationResolverTarget, relationResolverActionName, Object.getOwnPropertyDescriptor(relationResolverTarget, relationResolverActionName));
            }
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        for (const decorator of enhanceConfig.class) {
            decorator(typeClass);
        }
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                for (const allFieldsDecorator of allFieldsDecorators) {
                    allFieldsDecorator(typePrototype, typeFieldName);
                }
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            for (const fieldDecorator of fieldDecorators) {
                fieldDecorator(typePrototype, typeFieldName);
            }
        }
    }
}
const modelsInfo = {
    User: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt"],
    Account: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    Session: ["id", "sessionToken", "userId", "expires"],
    VerificationRequest: ["identifier", "token", "expires"],
    Genre: ["id", "name", "createdAt", "updatedAt"],
    Director: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    Actor: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    Language: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    Movie: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    Serie: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt"],
    Season: ["id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt"],
    Episode: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateAccount: ["_count", "_avg", "_sum", "_min", "_max"],
    AccountGroupBy: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSession: ["_count", "_min", "_max"],
    SessionGroupBy: ["id", "sessionToken", "userId", "expires", "_count", "_min", "_max"],
    AggregateVerificationRequest: ["_count", "_min", "_max"],
    VerificationRequestGroupBy: ["identifier", "token", "expires", "_count", "_min", "_max"],
    AggregateGenre: ["_count", "_avg", "_sum", "_min", "_max"],
    GenreGroupBy: ["id", "name", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateDirector: ["_count", "_avg", "_sum", "_min", "_max"],
    DirectorGroupBy: ["id", "name", "createdAt", "updatedAt", "seriesId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateActor: ["_count", "_avg", "_sum", "_min", "_max"],
    ActorGroupBy: ["id", "name", "createdAt", "updatedAt", "seriesId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateLanguage: ["_count", "_avg", "_sum", "_min", "_max"],
    LanguageGroupBy: ["id", "name", "createdAt", "updatedAt", "seriesId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateMovie: ["_count", "_avg", "_sum", "_min", "_max"],
    MovieGroupBy: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSerie: ["_count", "_avg", "_sum", "_min", "_max"],
    SerieGroupBy: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSeason: ["_count", "_avg", "_sum", "_min", "_max"],
    SeasonGroupBy: ["id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateEpisode: ["_count", "_avg", "_sum", "_min", "_max"],
    EpisodeGroupBy: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId", "_count", "_avg", "_sum", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UserCount: ["accounts", "sessions"],
    UserCountAggregate: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt", "_all"],
    UserMinAggregate: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt"],
    UserMaxAggregate: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt"],
    AccountCountAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "_all"],
    AccountAvgAggregate: ["expires_at"],
    AccountSumAggregate: ["expires_at"],
    AccountMinAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountMaxAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionCountAggregate: ["id", "sessionToken", "userId", "expires", "_all"],
    SessionMinAggregate: ["id", "sessionToken", "userId", "expires"],
    SessionMaxAggregate: ["id", "sessionToken", "userId", "expires"],
    VerificationRequestCountAggregate: ["identifier", "token", "expires", "_all"],
    VerificationRequestMinAggregate: ["identifier", "token", "expires"],
    VerificationRequestMaxAggregate: ["identifier", "token", "expires"],
    GenreCount: ["movies", "series"],
    GenreCountAggregate: ["id", "name", "createdAt", "updatedAt", "_all"],
    GenreAvgAggregate: ["id"],
    GenreSumAggregate: ["id"],
    GenreMinAggregate: ["id", "name", "createdAt", "updatedAt"],
    GenreMaxAggregate: ["id", "name", "createdAt", "updatedAt"],
    DirectorCount: ["movies"],
    DirectorCountAggregate: ["id", "name", "createdAt", "updatedAt", "seriesId", "_all"],
    DirectorAvgAggregate: ["id", "seriesId"],
    DirectorSumAggregate: ["id", "seriesId"],
    DirectorMinAggregate: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    DirectorMaxAggregate: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    ActorCount: ["movies"],
    ActorCountAggregate: ["id", "name", "createdAt", "updatedAt", "seriesId", "_all"],
    ActorAvgAggregate: ["id", "seriesId"],
    ActorSumAggregate: ["id", "seriesId"],
    ActorMinAggregate: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    ActorMaxAggregate: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    LanguageCount: ["movies", "series"],
    LanguageCountAggregate: ["id", "name", "createdAt", "updatedAt", "seriesId", "_all"],
    LanguageAvgAggregate: ["id", "seriesId"],
    LanguageSumAggregate: ["id", "seriesId"],
    LanguageMinAggregate: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    LanguageMaxAggregate: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    MovieCount: ["genres", "directors", "actors", "languages"],
    MovieCountAggregate: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "_all"],
    MovieAvgAggregate: ["id", "year", "runtime", "imdbRating"],
    MovieSumAggregate: ["id", "year", "runtime", "imdbRating"],
    MovieMinAggregate: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    MovieMaxAggregate: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    SerieCount: ["genres", "directors", "actors", "languages", "seasons"],
    SerieCountAggregate: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "_all"],
    SerieAvgAggregate: ["id", "year", "runtime", "imdbRating", "totalSeasons"],
    SerieSumAggregate: ["id", "year", "runtime", "imdbRating", "totalSeasons"],
    SerieMinAggregate: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt"],
    SerieMaxAggregate: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt"],
    SeasonCount: ["episodeIds"],
    SeasonCountAggregate: ["id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt", "_all"],
    SeasonAvgAggregate: ["id", "index", "episodes", "seriesId"],
    SeasonSumAggregate: ["id", "index", "episodes", "seriesId"],
    SeasonMinAggregate: ["id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt"],
    SeasonMaxAggregate: ["id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt"],
    EpisodeCountAggregate: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId", "_all"],
    EpisodeAvgAggregate: ["id", "runtime", "imdbRating", "seasonId"],
    EpisodeSumAggregate: ["id", "runtime", "imdbRating", "seasonId"],
    EpisodeMinAggregate: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId"],
    EpisodeMaxAggregate: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UserWhereInput: ["AND", "OR", "NOT", "id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "accounts", "sessions", "createdAt", "updatedAt"],
    UserOrderByWithRelationAndSearchRelevanceInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "accounts", "sessions", "createdAt", "updatedAt", "_relevance"],
    UserWhereUniqueInput: ["id", "username", "email"],
    UserOrderByWithAggregationInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt"],
    AccountWhereInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "user"],
    AccountOrderByWithRelationAndSearchRelevanceInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "user", "_relevance"],
    AccountWhereUniqueInput: ["id", "provider_providerAccountId"],
    AccountOrderByWithAggregationInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "_count", "_avg", "_max", "_min", "_sum"],
    AccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionWhereInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires", "user"],
    SessionOrderByWithRelationAndSearchRelevanceInput: ["id", "sessionToken", "userId", "expires", "user", "_relevance"],
    SessionWhereUniqueInput: ["id", "sessionToken"],
    SessionOrderByWithAggregationInput: ["id", "sessionToken", "userId", "expires", "_count", "_max", "_min"],
    SessionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires"],
    VerificationRequestWhereInput: ["AND", "OR", "NOT", "identifier", "token", "expires"],
    VerificationRequestOrderByWithRelationAndSearchRelevanceInput: ["identifier", "token", "expires", "_relevance"],
    VerificationRequestWhereUniqueInput: ["token", "identifier_token"],
    VerificationRequestOrderByWithAggregationInput: ["identifier", "token", "expires", "_count", "_max", "_min"],
    VerificationRequestScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "identifier", "token", "expires"],
    GenreWhereInput: ["AND", "OR", "NOT", "id", "name", "movies", "series", "createdAt", "updatedAt"],
    GenreOrderByWithRelationAndSearchRelevanceInput: ["id", "name", "movies", "series", "createdAt", "updatedAt", "_relevance"],
    GenreWhereUniqueInput: ["id", "name"],
    GenreOrderByWithAggregationInput: ["id", "name", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    GenreScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "createdAt", "updatedAt"],
    DirectorWhereInput: ["AND", "OR", "NOT", "id", "name", "movies", "createdAt", "updatedAt", "series", "seriesId"],
    DirectorOrderByWithRelationAndSearchRelevanceInput: ["id", "name", "movies", "createdAt", "updatedAt", "series", "seriesId", "_relevance"],
    DirectorWhereUniqueInput: ["id"],
    DirectorOrderByWithAggregationInput: ["id", "name", "createdAt", "updatedAt", "seriesId", "_count", "_avg", "_max", "_min", "_sum"],
    DirectorScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "createdAt", "updatedAt", "seriesId"],
    ActorWhereInput: ["AND", "OR", "NOT", "id", "name", "movies", "createdAt", "updatedAt", "series", "seriesId"],
    ActorOrderByWithRelationAndSearchRelevanceInput: ["id", "name", "movies", "createdAt", "updatedAt", "series", "seriesId", "_relevance"],
    ActorWhereUniqueInput: ["id"],
    ActorOrderByWithAggregationInput: ["id", "name", "createdAt", "updatedAt", "seriesId", "_count", "_avg", "_max", "_min", "_sum"],
    ActorScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "createdAt", "updatedAt", "seriesId"],
    LanguageWhereInput: ["AND", "OR", "NOT", "id", "name", "movies", "createdAt", "updatedAt", "series", "seriesId"],
    LanguageOrderByWithRelationAndSearchRelevanceInput: ["id", "name", "movies", "createdAt", "updatedAt", "series", "seriesId", "_relevance"],
    LanguageWhereUniqueInput: ["id", "name"],
    LanguageOrderByWithAggregationInput: ["id", "name", "createdAt", "updatedAt", "seriesId", "_count", "_avg", "_max", "_min", "_sum"],
    LanguageScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "createdAt", "updatedAt", "seriesId"],
    MovieWhereInput: ["AND", "OR", "NOT", "id", "title", "year", "rating", "release", "runtime", "genres", "directors", "actors", "plot", "languages", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    MovieOrderByWithRelationAndSearchRelevanceInput: ["id", "title", "year", "rating", "release", "runtime", "genres", "directors", "actors", "plot", "languages", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "_relevance"],
    MovieWhereUniqueInput: ["id", "imdbID"],
    MovieOrderByWithAggregationInput: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    MovieScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    SerieWhereInput: ["AND", "OR", "NOT", "id", "title", "year", "rating", "release", "runtime", "genres", "directors", "actors", "plot", "languages", "poster", "imdbRating", "imdbID", "totalSeasons", "seasons", "createdAt", "updatedAt"],
    SerieOrderByWithRelationAndSearchRelevanceInput: ["id", "title", "year", "rating", "release", "runtime", "genres", "directors", "actors", "plot", "languages", "poster", "imdbRating", "imdbID", "totalSeasons", "seasons", "createdAt", "updatedAt", "_relevance"],
    SerieWhereUniqueInput: ["id", "imdbID"],
    SerieOrderByWithAggregationInput: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    SerieScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt"],
    SeasonWhereInput: ["AND", "OR", "NOT", "id", "title", "index", "episodes", "episodeIds", "series", "seriesId", "launchDate", "createdAt", "updatedAt"],
    SeasonOrderByWithRelationAndSearchRelevanceInput: ["id", "title", "index", "episodes", "episodeIds", "series", "seriesId", "launchDate", "createdAt", "updatedAt", "_relevance"],
    SeasonWhereUniqueInput: ["id"],
    SeasonOrderByWithAggregationInput: ["id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    SeasonScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt"],
    EpisodeWhereInput: ["AND", "OR", "NOT", "id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "season", "seasonId"],
    EpisodeOrderByWithRelationAndSearchRelevanceInput: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "season", "seasonId", "_relevance"],
    EpisodeWhereUniqueInput: ["id", "imdbID"],
    EpisodeOrderByWithAggregationInput: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId", "_count", "_avg", "_max", "_min", "_sum"],
    EpisodeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId"],
    UserCreateInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt", "accounts", "sessions"],
    UserUpdateInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt", "accounts", "sessions"],
    UserCreateManyInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt"],
    UserUpdateManyMutationInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt"],
    AccountCreateInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "user"],
    AccountUpdateInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token", "user"],
    AccountCreateManyInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountUpdateManyMutationInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionCreateInput: ["id", "sessionToken", "expires", "user"],
    SessionUpdateInput: ["id", "sessionToken", "expires", "user"],
    SessionCreateManyInput: ["id", "sessionToken", "userId", "expires"],
    SessionUpdateManyMutationInput: ["id", "sessionToken", "expires"],
    VerificationRequestCreateInput: ["identifier", "token", "expires"],
    VerificationRequestUpdateInput: ["identifier", "token", "expires"],
    VerificationRequestCreateManyInput: ["identifier", "token", "expires"],
    VerificationRequestUpdateManyMutationInput: ["identifier", "token", "expires"],
    GenreCreateInput: ["name", "createdAt", "updatedAt", "movies", "series"],
    GenreUpdateInput: ["name", "createdAt", "updatedAt", "movies", "series"],
    GenreCreateManyInput: ["id", "name", "createdAt", "updatedAt"],
    GenreUpdateManyMutationInput: ["name", "createdAt", "updatedAt"],
    DirectorCreateInput: ["name", "createdAt", "updatedAt", "movies", "series"],
    DirectorUpdateInput: ["name", "createdAt", "updatedAt", "movies", "series"],
    DirectorCreateManyInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    DirectorUpdateManyMutationInput: ["name", "createdAt", "updatedAt"],
    ActorCreateInput: ["name", "createdAt", "updatedAt", "movies", "series"],
    ActorUpdateInput: ["name", "createdAt", "updatedAt", "movies", "series"],
    ActorCreateManyInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    ActorUpdateManyMutationInput: ["name", "createdAt", "updatedAt"],
    LanguageCreateInput: ["name", "createdAt", "updatedAt", "seriesId", "movies", "series"],
    LanguageUpdateInput: ["name", "createdAt", "updatedAt", "seriesId", "movies", "series"],
    LanguageCreateManyInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    LanguageUpdateManyMutationInput: ["name", "createdAt", "updatedAt", "seriesId"],
    MovieCreateInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "genres", "directors", "actors", "languages"],
    MovieUpdateInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "genres", "directors", "actors", "languages"],
    MovieCreateManyInput: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    MovieUpdateManyMutationInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    SerieCreateInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "genres", "directors", "actors", "languages", "seasons"],
    SerieUpdateInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "genres", "directors", "actors", "languages", "seasons"],
    SerieCreateManyInput: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt"],
    SerieUpdateManyMutationInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt"],
    SeasonCreateInput: ["title", "index", "episodes", "launchDate", "createdAt", "updatedAt", "episodeIds", "series"],
    SeasonUpdateInput: ["title", "index", "episodes", "launchDate", "createdAt", "updatedAt", "episodeIds", "series"],
    SeasonCreateManyInput: ["id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt"],
    SeasonUpdateManyMutationInput: ["title", "index", "episodes", "launchDate", "createdAt", "updatedAt"],
    EpisodeCreateInput: ["title", "runtime", "plot", "poster", "imdbRating", "imdbID", "season"],
    EpisodeUpdateInput: ["title", "runtime", "plot", "poster", "imdbRating", "imdbID", "season"],
    EpisodeCreateManyInput: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId"],
    EpisodeUpdateManyMutationInput: ["title", "runtime", "plot", "poster", "imdbRating", "imdbID"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not"],
    DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    EnumRoleFilter: ["equals", "in", "notIn", "not"],
    AccountListRelationFilter: ["every", "some", "none"],
    SessionListRelationFilter: ["every", "some", "none"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    AccountOrderByRelationAggregateInput: ["_count"],
    SessionOrderByRelationAggregateInput: ["_count"],
    UserOrderByRelevanceInput: ["fields", "sort", "search"],
    UserCountOrderByAggregateInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt"],
    UserMaxOrderByAggregateInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt"],
    UserMinOrderByAggregateInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not", "_count", "_min", "_max"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not", "_count", "_min", "_max"],
    DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    EnumRoleWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    UserRelationFilter: ["is", "isNot"],
    AccountOrderByRelevanceInput: ["fields", "sort", "search"],
    AccountProviderProviderAccountIdCompoundUniqueInput: ["provider", "providerAccountId"],
    AccountCountOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountAvgOrderByAggregateInput: ["expires_at"],
    AccountMaxOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountMinOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountSumOrderByAggregateInput: ["expires_at"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    SessionOrderByRelevanceInput: ["fields", "sort", "search"],
    SessionCountOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    SessionMaxOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    SessionMinOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    VerificationRequestOrderByRelevanceInput: ["fields", "sort", "search"],
    VerificationRequestIdentifierTokenCompoundUniqueInput: ["identifier", "token"],
    VerificationRequestCountOrderByAggregateInput: ["identifier", "token", "expires"],
    VerificationRequestMaxOrderByAggregateInput: ["identifier", "token", "expires"],
    VerificationRequestMinOrderByAggregateInput: ["identifier", "token", "expires"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    MovieListRelationFilter: ["every", "some", "none"],
    SerieListRelationFilter: ["every", "some", "none"],
    MovieOrderByRelationAggregateInput: ["_count"],
    SerieOrderByRelationAggregateInput: ["_count"],
    GenreOrderByRelevanceInput: ["fields", "sort", "search"],
    GenreCountOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt"],
    GenreAvgOrderByAggregateInput: ["id"],
    GenreMaxOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt"],
    GenreMinOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt"],
    GenreSumOrderByAggregateInput: ["id"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    SerieRelationFilter: ["is", "isNot"],
    DirectorOrderByRelevanceInput: ["fields", "sort", "search"],
    DirectorCountOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    DirectorAvgOrderByAggregateInput: ["id", "seriesId"],
    DirectorMaxOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    DirectorMinOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    DirectorSumOrderByAggregateInput: ["id", "seriesId"],
    ActorOrderByRelevanceInput: ["fields", "sort", "search"],
    ActorCountOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    ActorAvgOrderByAggregateInput: ["id", "seriesId"],
    ActorMaxOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    ActorMinOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    ActorSumOrderByAggregateInput: ["id", "seriesId"],
    LanguageOrderByRelevanceInput: ["fields", "sort", "search"],
    LanguageCountOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    LanguageAvgOrderByAggregateInput: ["id", "seriesId"],
    LanguageMaxOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    LanguageMinOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "seriesId"],
    LanguageSumOrderByAggregateInput: ["id", "seriesId"],
    GenreListRelationFilter: ["every", "some", "none"],
    DirectorListRelationFilter: ["every", "some", "none"],
    ActorListRelationFilter: ["every", "some", "none"],
    LanguageListRelationFilter: ["every", "some", "none"],
    FloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    GenreOrderByRelationAggregateInput: ["_count"],
    DirectorOrderByRelationAggregateInput: ["_count"],
    ActorOrderByRelationAggregateInput: ["_count"],
    LanguageOrderByRelationAggregateInput: ["_count"],
    MovieOrderByRelevanceInput: ["fields", "sort", "search"],
    MovieCountOrderByAggregateInput: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    MovieAvgOrderByAggregateInput: ["id", "year", "runtime", "imdbRating"],
    MovieMaxOrderByAggregateInput: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    MovieMinOrderByAggregateInput: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    MovieSumOrderByAggregateInput: ["id", "year", "runtime", "imdbRating"],
    FloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    SeasonListRelationFilter: ["every", "some", "none"],
    SeasonOrderByRelationAggregateInput: ["_count"],
    SerieOrderByRelevanceInput: ["fields", "sort", "search"],
    SerieCountOrderByAggregateInput: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt"],
    SerieAvgOrderByAggregateInput: ["id", "year", "runtime", "imdbRating", "totalSeasons"],
    SerieMaxOrderByAggregateInput: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt"],
    SerieMinOrderByAggregateInput: ["id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt"],
    SerieSumOrderByAggregateInput: ["id", "year", "runtime", "imdbRating", "totalSeasons"],
    EpisodeListRelationFilter: ["every", "some", "none"],
    EpisodeOrderByRelationAggregateInput: ["_count"],
    SeasonOrderByRelevanceInput: ["fields", "sort", "search"],
    SeasonCountOrderByAggregateInput: ["id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt"],
    SeasonAvgOrderByAggregateInput: ["id", "index", "episodes", "seriesId"],
    SeasonMaxOrderByAggregateInput: ["id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt"],
    SeasonMinOrderByAggregateInput: ["id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt"],
    SeasonSumOrderByAggregateInput: ["id", "index", "episodes", "seriesId"],
    SeasonRelationFilter: ["is", "isNot"],
    EpisodeOrderByRelevanceInput: ["fields", "sort", "search"],
    EpisodeCountOrderByAggregateInput: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId"],
    EpisodeAvgOrderByAggregateInput: ["id", "runtime", "imdbRating", "seasonId"],
    EpisodeMaxOrderByAggregateInput: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId"],
    EpisodeMinOrderByAggregateInput: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId"],
    EpisodeSumOrderByAggregateInput: ["id", "runtime", "imdbRating", "seasonId"],
    AccountCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    SessionCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    NullableDateTimeFieldUpdateOperationsInput: ["set"],
    EnumRoleFieldUpdateOperationsInput: ["set"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    AccountUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    SessionUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutAccountsInput: ["create", "connectOrCreate", "connect"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    UserUpdateOneRequiredWithoutAccountsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserCreateNestedOneWithoutSessionsInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutSessionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    MovieCreateNestedManyWithoutGenresInput: ["create", "connectOrCreate", "connect"],
    SerieCreateNestedManyWithoutGenresInput: ["create", "connectOrCreate", "connect"],
    MovieUpdateManyWithoutGenresInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    SerieUpdateManyWithoutGenresInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    MovieCreateNestedManyWithoutDirectorsInput: ["create", "connectOrCreate", "connect"],
    SerieCreateNestedOneWithoutDirectorsInput: ["create", "connectOrCreate", "connect"],
    MovieUpdateManyWithoutDirectorsInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    SerieUpdateOneWithoutDirectorsInput: ["create", "connectOrCreate", "upsert", "connect", "disconnect", "delete", "update"],
    MovieCreateNestedManyWithoutActorsInput: ["create", "connectOrCreate", "connect"],
    SerieCreateNestedOneWithoutActorsInput: ["create", "connectOrCreate", "connect"],
    MovieUpdateManyWithoutActorsInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    SerieUpdateOneWithoutActorsInput: ["create", "connectOrCreate", "upsert", "connect", "disconnect", "delete", "update"],
    MovieCreateNestedManyWithoutLanguagesInput: ["create", "connectOrCreate", "connect"],
    SerieCreateNestedManyWithoutLanguagesInput: ["create", "connectOrCreate", "connect"],
    MovieUpdateManyWithoutLanguagesInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    SerieUpdateManyWithoutLanguagesInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    GenreCreateNestedManyWithoutMoviesInput: ["create", "connectOrCreate", "connect"],
    DirectorCreateNestedManyWithoutMoviesInput: ["create", "connectOrCreate", "connect"],
    ActorCreateNestedManyWithoutMoviesInput: ["create", "connectOrCreate", "connect"],
    LanguageCreateNestedManyWithoutMoviesInput: ["create", "connectOrCreate", "connect"],
    FloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    GenreUpdateManyWithoutMoviesInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    DirectorUpdateManyWithoutMoviesInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    ActorUpdateManyWithoutMoviesInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    LanguageUpdateManyWithoutMoviesInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    GenreCreateNestedManyWithoutSeriesInput: ["create", "connectOrCreate", "connect"],
    DirectorCreateNestedManyWithoutSeriesInput: ["create", "connectOrCreate", "createMany", "connect"],
    ActorCreateNestedManyWithoutSeriesInput: ["create", "connectOrCreate", "createMany", "connect"],
    LanguageCreateNestedManyWithoutSeriesInput: ["create", "connectOrCreate", "connect"],
    SeasonCreateNestedManyWithoutSeriesInput: ["create", "connectOrCreate", "createMany", "connect"],
    GenreUpdateManyWithoutSeriesInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    DirectorUpdateManyWithoutSeriesInput: ["create", "connectOrCreate", "upsert", "createMany", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    ActorUpdateManyWithoutSeriesInput: ["create", "connectOrCreate", "upsert", "createMany", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    LanguageUpdateManyWithoutSeriesInput: ["create", "connectOrCreate", "upsert", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    SeasonUpdateManyWithoutSeriesInput: ["create", "connectOrCreate", "upsert", "createMany", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    EpisodeCreateNestedManyWithoutSeasonInput: ["create", "connectOrCreate", "createMany", "connect"],
    SerieCreateNestedOneWithoutSeasonsInput: ["create", "connectOrCreate", "connect"],
    EpisodeUpdateManyWithoutSeasonInput: ["create", "connectOrCreate", "upsert", "createMany", "connect", "set", "disconnect", "delete", "update", "updateMany", "deleteMany"],
    SerieUpdateOneRequiredWithoutSeasonsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    SeasonCreateNestedOneWithoutEpisodeIdsInput: ["create", "connectOrCreate", "connect"],
    SeasonUpdateOneRequiredWithoutEpisodeIdsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not"],
    NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedEnumRoleFilter: ["equals", "in", "notIn", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not", "_count", "_min", "_max"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedEnumRoleWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedFloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    AccountCreateWithoutUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    AccountCreateOrConnectWithoutUserInput: ["where", "create"],
    AccountCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    SessionCreateWithoutUserInput: ["id", "sessionToken", "expires"],
    SessionCreateOrConnectWithoutUserInput: ["where", "create"],
    SessionCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    AccountUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    AccountUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    AccountUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    AccountScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    SessionUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    SessionUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    SessionScalarWhereInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires"],
    UserCreateWithoutAccountsInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt", "sessions"],
    UserCreateOrConnectWithoutAccountsInput: ["where", "create"],
    UserUpsertWithoutAccountsInput: ["update", "create"],
    UserUpdateWithoutAccountsInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt", "sessions"],
    UserCreateWithoutSessionsInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt", "accounts"],
    UserCreateOrConnectWithoutSessionsInput: ["where", "create"],
    UserUpsertWithoutSessionsInput: ["update", "create"],
    UserUpdateWithoutSessionsInput: ["id", "lastName", "firstName", "username", "email", "emailVerified", "image", "role", "createdAt", "updatedAt", "accounts"],
    MovieCreateWithoutGenresInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "directors", "actors", "languages"],
    MovieCreateOrConnectWithoutGenresInput: ["where", "create"],
    SerieCreateWithoutGenresInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "directors", "actors", "languages", "seasons"],
    SerieCreateOrConnectWithoutGenresInput: ["where", "create"],
    MovieUpsertWithWhereUniqueWithoutGenresInput: ["where", "update", "create"],
    MovieUpdateWithWhereUniqueWithoutGenresInput: ["where", "data"],
    MovieUpdateManyWithWhereWithoutGenresInput: ["where", "data"],
    MovieScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt"],
    SerieUpsertWithWhereUniqueWithoutGenresInput: ["where", "update", "create"],
    SerieUpdateWithWhereUniqueWithoutGenresInput: ["where", "data"],
    SerieUpdateManyWithWhereWithoutGenresInput: ["where", "data"],
    SerieScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt"],
    MovieCreateWithoutDirectorsInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "genres", "actors", "languages"],
    MovieCreateOrConnectWithoutDirectorsInput: ["where", "create"],
    SerieCreateWithoutDirectorsInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "genres", "actors", "languages", "seasons"],
    SerieCreateOrConnectWithoutDirectorsInput: ["where", "create"],
    MovieUpsertWithWhereUniqueWithoutDirectorsInput: ["where", "update", "create"],
    MovieUpdateWithWhereUniqueWithoutDirectorsInput: ["where", "data"],
    MovieUpdateManyWithWhereWithoutDirectorsInput: ["where", "data"],
    SerieUpsertWithoutDirectorsInput: ["update", "create"],
    SerieUpdateWithoutDirectorsInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "genres", "actors", "languages", "seasons"],
    MovieCreateWithoutActorsInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "genres", "directors", "languages"],
    MovieCreateOrConnectWithoutActorsInput: ["where", "create"],
    SerieCreateWithoutActorsInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "genres", "directors", "languages", "seasons"],
    SerieCreateOrConnectWithoutActorsInput: ["where", "create"],
    MovieUpsertWithWhereUniqueWithoutActorsInput: ["where", "update", "create"],
    MovieUpdateWithWhereUniqueWithoutActorsInput: ["where", "data"],
    MovieUpdateManyWithWhereWithoutActorsInput: ["where", "data"],
    SerieUpsertWithoutActorsInput: ["update", "create"],
    SerieUpdateWithoutActorsInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "genres", "directors", "languages", "seasons"],
    MovieCreateWithoutLanguagesInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "genres", "directors", "actors"],
    MovieCreateOrConnectWithoutLanguagesInput: ["where", "create"],
    SerieCreateWithoutLanguagesInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "genres", "directors", "actors", "seasons"],
    SerieCreateOrConnectWithoutLanguagesInput: ["where", "create"],
    MovieUpsertWithWhereUniqueWithoutLanguagesInput: ["where", "update", "create"],
    MovieUpdateWithWhereUniqueWithoutLanguagesInput: ["where", "data"],
    MovieUpdateManyWithWhereWithoutLanguagesInput: ["where", "data"],
    SerieUpsertWithWhereUniqueWithoutLanguagesInput: ["where", "update", "create"],
    SerieUpdateWithWhereUniqueWithoutLanguagesInput: ["where", "data"],
    SerieUpdateManyWithWhereWithoutLanguagesInput: ["where", "data"],
    GenreCreateWithoutMoviesInput: ["name", "createdAt", "updatedAt", "series"],
    GenreCreateOrConnectWithoutMoviesInput: ["where", "create"],
    DirectorCreateWithoutMoviesInput: ["name", "createdAt", "updatedAt", "series"],
    DirectorCreateOrConnectWithoutMoviesInput: ["where", "create"],
    ActorCreateWithoutMoviesInput: ["name", "createdAt", "updatedAt", "series"],
    ActorCreateOrConnectWithoutMoviesInput: ["where", "create"],
    LanguageCreateWithoutMoviesInput: ["name", "createdAt", "updatedAt", "seriesId", "series"],
    LanguageCreateOrConnectWithoutMoviesInput: ["where", "create"],
    GenreUpsertWithWhereUniqueWithoutMoviesInput: ["where", "update", "create"],
    GenreUpdateWithWhereUniqueWithoutMoviesInput: ["where", "data"],
    GenreUpdateManyWithWhereWithoutMoviesInput: ["where", "data"],
    GenreScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "createdAt", "updatedAt"],
    DirectorUpsertWithWhereUniqueWithoutMoviesInput: ["where", "update", "create"],
    DirectorUpdateWithWhereUniqueWithoutMoviesInput: ["where", "data"],
    DirectorUpdateManyWithWhereWithoutMoviesInput: ["where", "data"],
    DirectorScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "createdAt", "updatedAt", "seriesId"],
    ActorUpsertWithWhereUniqueWithoutMoviesInput: ["where", "update", "create"],
    ActorUpdateWithWhereUniqueWithoutMoviesInput: ["where", "data"],
    ActorUpdateManyWithWhereWithoutMoviesInput: ["where", "data"],
    ActorScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "createdAt", "updatedAt", "seriesId"],
    LanguageUpsertWithWhereUniqueWithoutMoviesInput: ["where", "update", "create"],
    LanguageUpdateWithWhereUniqueWithoutMoviesInput: ["where", "data"],
    LanguageUpdateManyWithWhereWithoutMoviesInput: ["where", "data"],
    LanguageScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "createdAt", "updatedAt", "seriesId"],
    GenreCreateWithoutSeriesInput: ["name", "createdAt", "updatedAt", "movies"],
    GenreCreateOrConnectWithoutSeriesInput: ["where", "create"],
    DirectorCreateWithoutSeriesInput: ["name", "createdAt", "updatedAt", "movies"],
    DirectorCreateOrConnectWithoutSeriesInput: ["where", "create"],
    DirectorCreateManySeriesInputEnvelope: ["data", "skipDuplicates"],
    ActorCreateWithoutSeriesInput: ["name", "createdAt", "updatedAt", "movies"],
    ActorCreateOrConnectWithoutSeriesInput: ["where", "create"],
    ActorCreateManySeriesInputEnvelope: ["data", "skipDuplicates"],
    LanguageCreateWithoutSeriesInput: ["name", "createdAt", "updatedAt", "seriesId", "movies"],
    LanguageCreateOrConnectWithoutSeriesInput: ["where", "create"],
    SeasonCreateWithoutSeriesInput: ["title", "index", "episodes", "launchDate", "createdAt", "updatedAt", "episodeIds"],
    SeasonCreateOrConnectWithoutSeriesInput: ["where", "create"],
    SeasonCreateManySeriesInputEnvelope: ["data", "skipDuplicates"],
    GenreUpsertWithWhereUniqueWithoutSeriesInput: ["where", "update", "create"],
    GenreUpdateWithWhereUniqueWithoutSeriesInput: ["where", "data"],
    GenreUpdateManyWithWhereWithoutSeriesInput: ["where", "data"],
    DirectorUpsertWithWhereUniqueWithoutSeriesInput: ["where", "update", "create"],
    DirectorUpdateWithWhereUniqueWithoutSeriesInput: ["where", "data"],
    DirectorUpdateManyWithWhereWithoutSeriesInput: ["where", "data"],
    ActorUpsertWithWhereUniqueWithoutSeriesInput: ["where", "update", "create"],
    ActorUpdateWithWhereUniqueWithoutSeriesInput: ["where", "data"],
    ActorUpdateManyWithWhereWithoutSeriesInput: ["where", "data"],
    LanguageUpsertWithWhereUniqueWithoutSeriesInput: ["where", "update", "create"],
    LanguageUpdateWithWhereUniqueWithoutSeriesInput: ["where", "data"],
    LanguageUpdateManyWithWhereWithoutSeriesInput: ["where", "data"],
    SeasonUpsertWithWhereUniqueWithoutSeriesInput: ["where", "update", "create"],
    SeasonUpdateWithWhereUniqueWithoutSeriesInput: ["where", "data"],
    SeasonUpdateManyWithWhereWithoutSeriesInput: ["where", "data"],
    SeasonScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "index", "episodes", "seriesId", "launchDate", "createdAt", "updatedAt"],
    EpisodeCreateWithoutSeasonInput: ["title", "runtime", "plot", "poster", "imdbRating", "imdbID"],
    EpisodeCreateOrConnectWithoutSeasonInput: ["where", "create"],
    EpisodeCreateManySeasonInputEnvelope: ["data", "skipDuplicates"],
    SerieCreateWithoutSeasonsInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "genres", "directors", "actors", "languages"],
    SerieCreateOrConnectWithoutSeasonsInput: ["where", "create"],
    EpisodeUpsertWithWhereUniqueWithoutSeasonInput: ["where", "update", "create"],
    EpisodeUpdateWithWhereUniqueWithoutSeasonInput: ["where", "data"],
    EpisodeUpdateManyWithWhereWithoutSeasonInput: ["where", "data"],
    EpisodeScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID", "seasonId"],
    SerieUpsertWithoutSeasonsInput: ["update", "create"],
    SerieUpdateWithoutSeasonsInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "genres", "directors", "actors", "languages"],
    SeasonCreateWithoutEpisodeIdsInput: ["title", "index", "episodes", "launchDate", "createdAt", "updatedAt", "series"],
    SeasonCreateOrConnectWithoutEpisodeIdsInput: ["where", "create"],
    SeasonUpsertWithoutEpisodeIdsInput: ["update", "create"],
    SeasonUpdateWithoutEpisodeIdsInput: ["title", "index", "episodes", "launchDate", "createdAt", "updatedAt", "series"],
    AccountCreateManyUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionCreateManyUserInput: ["id", "sessionToken", "expires"],
    AccountUpdateWithoutUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "oauth_token_secret", "oauth_token"],
    SessionUpdateWithoutUserInput: ["id", "sessionToken", "expires"],
    MovieUpdateWithoutGenresInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "directors", "actors", "languages"],
    SerieUpdateWithoutGenresInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "directors", "actors", "languages", "seasons"],
    MovieUpdateWithoutDirectorsInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "genres", "actors", "languages"],
    MovieUpdateWithoutActorsInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "genres", "directors", "languages"],
    MovieUpdateWithoutLanguagesInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "createdAt", "updatedAt", "genres", "directors", "actors"],
    SerieUpdateWithoutLanguagesInput: ["title", "year", "rating", "release", "runtime", "plot", "poster", "imdbRating", "imdbID", "totalSeasons", "createdAt", "updatedAt", "genres", "directors", "actors", "seasons"],
    GenreUpdateWithoutMoviesInput: ["name", "createdAt", "updatedAt", "series"],
    DirectorUpdateWithoutMoviesInput: ["name", "createdAt", "updatedAt", "series"],
    ActorUpdateWithoutMoviesInput: ["name", "createdAt", "updatedAt", "series"],
    LanguageUpdateWithoutMoviesInput: ["name", "createdAt", "updatedAt", "seriesId", "series"],
    DirectorCreateManySeriesInput: ["id", "name", "createdAt", "updatedAt"],
    ActorCreateManySeriesInput: ["id", "name", "createdAt", "updatedAt"],
    SeasonCreateManySeriesInput: ["id", "title", "index", "episodes", "launchDate", "createdAt", "updatedAt"],
    GenreUpdateWithoutSeriesInput: ["name", "createdAt", "updatedAt", "movies"],
    DirectorUpdateWithoutSeriesInput: ["name", "createdAt", "updatedAt", "movies"],
    ActorUpdateWithoutSeriesInput: ["name", "createdAt", "updatedAt", "movies"],
    LanguageUpdateWithoutSeriesInput: ["name", "createdAt", "updatedAt", "seriesId", "movies"],
    SeasonUpdateWithoutSeriesInput: ["title", "index", "episodes", "launchDate", "createdAt", "updatedAt", "episodeIds"],
    EpisodeCreateManySeasonInput: ["id", "title", "runtime", "plot", "poster", "imdbRating", "imdbID"],
    EpisodeUpdateWithoutSeasonInput: ["title", "runtime", "plot", "poster", "imdbRating", "imdbID"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
